 set state form 1
      React does Batching for all the event handler no matter how many timees you call set state - componenets will render only once
-> React will merge the multiple set state call to one call and will do shallow merging which means it will take up the last call and display it.
         this.setState({
             qty : this.state.qty + 1

         });

         set state form 2 - if preious state required use this 
        set state call is asynch
         it will maintain queue because of callback
         this.setState((prevState) => {
            return {
                qty : prevState.qty + 1
            }
        });
-> If we want to perform some action just after the state is updating we can pass an optional call back to our setState function.     
-> In promise set state acts like a synchronous call 
-> If we call the set state thrice and increase the setState also
-> It will renderthe component as many time setState is called

// constructor() {
//     //     super()
//     //     this.state = {
//     //         price: 999,
//     //         title: 'Phone',
//     //         qty: 1,
//     //         img: ''
//     //     }
//     //     // this.testing();
//     // }

//     // testing() {
//     //     const promise = new Promise((resolve,reject) => {
//     //         setTimeout(() => {
//     //             resolve('done');
//     //         }, 5000);
//     //     })

//     //     promise.then( () => {
//     //         //setState acts like a synchronous call
//     //         // this.setState({qty : 100});
//     //         this.setState({qty : this.state.qty + 10});


//     //         console.log('state',this.state);
//     //     })
//     // }
// //alternative to this
// // onClick = {this.increaseQuantity.bind(this)}
//     increaseQuantity = () => {
//       //set state form 1
//       //React does Batching for all the event handler no matter how many timees you call set state - componenets will render only once
//         // this.setState({
//         //     qty : this.state.qty + 1

//         // });

//          //set state form 2 - if preious state required use this 
//         //set state call is asynch
//          //it will maintain queue because of callback
//          this.setState((prevState) => {
//             return {
//                 qty : prevState.qty + 1
//             }
//         });
//     }

//     decreaseQuantity = () => {
//         const { qty } = this.state;
//         if(qty == 0) {
//             return;
//         }
//         this.setState((prevState) => {
//             return {
//                 qty : prevState.qty - 1
//             }
//         });
//     }

//     deleteQuantity = () => {
//         this.setState({
//                 qty : 0,
//                 price : 0,
//                 title : 'Empty'
//             });
//     }